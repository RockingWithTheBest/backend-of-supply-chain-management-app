// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xx1.Db;

#nullable disable

namespace xx1.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250205104144_DataForProducts_N_Supplies")]
    partial class DataForProducts_N_Supplies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Back_End.Models.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReturnId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReturnId");

                    b.HasIndex("RoleId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Back_End.Models.DeliveryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EstimatedDelivery")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TrackNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Back_End.Models.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TaxStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Back_End.Models.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Brand = "Samsung",
                            Description = "Electronics",
                            Name = "Galaxy S23",
                            Price = 899.99m,
                            StockQuantity = 13,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Apple",
                            Description = "Electronics",
                            Name = "MacBook Pro",
                            Price = 1999.99m,
                            StockQuantity = 20,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Dell",
                            Description = "Electronics",
                            Name = "Dell XPS 13",
                            Price = 1299.99m,
                            StockQuantity = 14,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Sony",
                            Description = "Electronics",
                            Name = "Sony WH-1000XM4",
                            Price = 349.99m,
                            StockQuantity = 100,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 6,
                            Brand = "LG",
                            Description = "Electronics",
                            Name = "4K Ultra HD TV",
                            Price = 799.99m,
                            StockQuantity = 25,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Amazon",
                            Description = "Electronics",
                            Name = "Smart Home Hub",
                            Price = 149.99m,
                            StockQuantity = 80,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Boosted",
                            Description = "Electronics",
                            Name = "Electric Skateboard",
                            Price = 1299.99m,
                            StockQuantity = 10,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Rad Power Bikes",
                            Description = "Motors",
                            Name = "Electric Bike",
                            Price = 1499.99m,
                            StockQuantity = 25,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Harley",
                            Description = "Motors",
                            Name = "Harley Davidson Motorcycle",
                            Price = 19999.99m,
                            StockQuantity = 23,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Yamaha",
                            Description = "Motors",
                            Name = "Yamaha Outboard Motor",
                            Price = 3000m,
                            StockQuantity = 8,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Garmin",
                            Description = "Motors",
                            Name = "Car GPS Navigation",
                            Price = 199.99m,
                            StockQuantity = 40,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 13,
                            Brand = "ChargePoint",
                            Description = "Motors",
                            Name = "Electric Car Charger",
                            Price = 499.99m,
                            StockQuantity = 20,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 14,
                            Brand = "Nike",
                            Description = "Clothes",
                            Name = "Graphic T-Shirt",
                            Price = 24.99m,
                            StockQuantity = 150,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 15,
                            Brand = "Levi’s",
                            Description = "Clothes",
                            Name = "Skinny Jeans",
                            Price = 59.99m,
                            StockQuantity = 77,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 16,
                            Brand = "Zara",
                            Description = "Clothes",
                            Name = "Leather Jacket",
                            Price = 129.99m,
                            StockQuantity = 30,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 17,
                            Brand = "Adidas",
                            Description = "Clothes",
                            Name = "Windbreaker",
                            Price = 49.99m,
                            StockQuantity = 60,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 18,
                            Brand = "Puma",
                            Description = "Clothes",
                            Name = "Sneakers",
                            Price = 89.99m,
                            StockQuantity = 70,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 19,
                            Brand = "New Era",
                            Description = "Clothes",
                            Name = "Baseball Cap",
                            Price = 29.99m,
                            StockQuantity = 93,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 20,
                            Brand = "H&M",
                            Description = "Clothes",
                            Name = "Formal Dress",
                            Price = 79.99m,
                            StockQuantity = 40,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 21,
                            Brand = "Columbia",
                            Description = "Clothes",
                            Name = "Winter Coat",
                            Price = 139.99m,
                            StockQuantity = 15,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 23,
                            Brand = "Samsung",
                            Description = "Electronics",
                            Name = "AirPods",
                            Price = 345.99m,
                            StockQuantity = 20,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 35,
                            Brand = "Apple",
                            Description = "Electronics",
                            Name = "iphone 14",
                            Price = 1234.98m,
                            StockQuantity = 4,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 36,
                            Brand = "Nike",
                            Description = "Clothes",
                            Name = "Jordan 1 HighTop",
                            Price = 10000m,
                            StockQuantity = 8,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 37,
                            Brand = "Nike",
                            Description = "Motors",
                            Name = "Jordan 9",
                            Price = 999.99m,
                            StockQuantity = 23,
                            SupplierId = 2
                        });
                });

            modelBuilder.Entity("Back_End.Models.ReturnEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReturnStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Back_End.Models.SupplierEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Supplies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "nicolaiS100@gmail.com",
                            Name = "Nicolai"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bwalaya@gmail.com",
                            Name = "Bwalya"
                        },
                        new
                        {
                            Id = 3,
                            Email = "kenny100@gmail.com",
                            Name = "Kenny"
                        },
                        new
                        {
                            Id = 4,
                            Email = "benyyK@gmail.com",
                            Name = "benjamin_K"
                        },
                        new
                        {
                            Id = 5,
                            Email = "LionelMbewe@gmail.com",
                            Name = "Lionel M"
                        });
                });

            modelBuilder.Entity("SupplyChain.Entities_Models_.CashEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Cash");
                });

            modelBuilder.Entity("SupplyChain.Entities_Models_.ChequeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Cheques");
                });

            modelBuilder.Entity("SupplyChain.Entities_Models_.PaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CashId")
                        .HasColumnType("int");

                    b.Property<int?>("ChequeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("xx1.Entities_Models_.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("xx1.Entities_Models_.InventoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderCheckId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PricePaid")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderCheckId");

                    b.HasIndex("OrderId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("xx1.Entities_Models_.OrderCheckEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Order Supplied");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderChecks");
                });

            modelBuilder.Entity("xx1.Entities_Models_.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 37546743,
                            RoleName = "Customer"
                        },
                        new
                        {
                            Id = 8678576,
                            RoleName = "Employee"
                        },
                        new
                        {
                            Id = 5323542,
                            RoleName = "Supplier"
                        });
                });

            modelBuilder.Entity("Back_End.Models.CustomerEntity", b =>
                {
                    b.HasOne("Back_End.Models.ReturnEntity", "Return")
                        .WithMany("CustomersList")
                        .HasForeignKey("ReturnId");

                    b.HasOne("xx1.Entities_Models_.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Return");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Back_End.Models.DeliveryEntity", b =>
                {
                    b.HasOne("Back_End.Models.SupplierEntity", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Back_End.Models.OrderEntity", b =>
                {
                    b.HasOne("Back_End.Models.CustomerEntity", "Customer")
                        .WithMany("OrdersList")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Back_End.Models.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Back_End.Models.ProductEntity", b =>
                {
                    b.HasOne("Back_End.Models.SupplierEntity", "Supplier")
                        .WithMany("ProductList")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Back_End.Models.ReturnEntity", b =>
                {
                    b.HasOne("Back_End.Models.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SupplyChain.Entities_Models_.CashEntity", b =>
                {
                    b.HasOne("SupplyChain.Entities_Models_.PaymentEntity", "Payment")
                        .WithOne("Cash")
                        .HasForeignKey("SupplyChain.Entities_Models_.CashEntity", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("SupplyChain.Entities_Models_.ChequeEntity", b =>
                {
                    b.HasOne("SupplyChain.Entities_Models_.PaymentEntity", "Payment")
                        .WithOne("Cheque")
                        .HasForeignKey("SupplyChain.Entities_Models_.ChequeEntity", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("SupplyChain.Entities_Models_.PaymentEntity", b =>
                {
                    b.HasOne("Back_End.Models.SupplierEntity", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("xx1.Entities_Models_.EmployeeEntity", b =>
                {
                    b.HasOne("xx1.Entities_Models_.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("xx1.Entities_Models_.InventoryEntity", b =>
                {
                    b.HasOne("Back_End.Models.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("xx1.Entities_Models_.OrderCheckEntity", "OrderCheck")
                        .WithMany()
                        .HasForeignKey("OrderCheckId");

                    b.HasOne("Back_End.Models.OrderEntity", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("OrderCheck");
                });

            modelBuilder.Entity("xx1.Entities_Models_.OrderCheckEntity", b =>
                {
                    b.HasOne("Back_End.Models.OrderEntity", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("Back_End.Models.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Back_End.Models.CustomerEntity", b =>
                {
                    b.Navigation("OrdersList");
                });

            modelBuilder.Entity("Back_End.Models.ReturnEntity", b =>
                {
                    b.Navigation("CustomersList");
                });

            modelBuilder.Entity("Back_End.Models.SupplierEntity", b =>
                {
                    b.Navigation("ProductList");
                });

            modelBuilder.Entity("SupplyChain.Entities_Models_.PaymentEntity", b =>
                {
                    b.Navigation("Cash")
                        .IsRequired();

                    b.Navigation("Cheque")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
